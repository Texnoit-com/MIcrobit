Кнопки
-------

Любая программа чаще всего имеет элементы вывода информации и элементы ввода.
В микроконтроллерах часто используются для этого кнопки

**Мicrobit** имеет две кнопки на лицевой части. Они называются ``A`` и ``B``. 


Напишите программу, которая выводит на дисплей информацию о кнопке ``A``::

    from microbit import *

    sleep(10000)
    display.scroll(str(button_a.get_presses()))

Микроконтроллер засыпает на 10 секунд (``sleep(10000)``). Вы нажимаете несколлько раз на кнопку
Следующая команда выводит количество нажатий ``button_a.get_presses()``


    * ``button_a`` - указывает на объект кнопка ``A``. Кнопка ``B`` имеет указатель ``button_b``
    * ``get_presses()`` - функция (команда), которая возвращает количество нажатий
    * ``str()`` - функция, которая переводит число в строку

.. warning::
    Функция ``scroll()`` принимает только строковые значения. 

Функции можно вкладывать в друг друга. Они выполняются в порядке раскрывания ( в начале самая вложенная)
Примером может служить **Матрешка**. В таком случае выполнение по росту от маленькой до большой.

.. image:: matrioshka.jpg


Отслеживание событий
++++++++++++++++++++

Часто необходимо создать ожидание события. Вы создаете цикл, который опрашивает устройство и 
ждет от него выполнения условия.

Для создания такого цикла можно использовать ``while``. Он проверяет, если условие 
события возвращает ``True`` он запускает *блок кода*, называемый *телом* цикла.
Если возвращается ``False``, он выходит из цикла и продолжает выполнять программу дальше::

    from microbit import *

    while not button_a.is_pressed():
        display.show(Image.ASLEEP)

    display.show(Image.SURPRISED)

``not button_a.is_pressed()`` - кнопка ``A`` **не** нажата (``not``), выводится изображение ``Image.ASLEEP``
 иначе ``Image.SURPRISED``

 Вы можете использовать логические операторы для отслеживания нескольких событий::

     while not button_a.is_pressed() and  not button_b.is_pressed():

* ``and`` - логическая ``И``. кнопка ``A`` **и** ``B``**не нажата**

    while not button_a.is_pressed() or  not button_b.is_pressed():

* ``or`` - логическая ``И``. кнопка ``A`` **или** ``B``**не нажата**


Обработка событий
+++++++++++++++++

If we want MicroPython to react to button press events we should put it into
an infinite loop and check if the button ``is_pressed``.

An infinite loop is easy::

    while True:
        # Do stuff

(Remember, ``while`` checks if something is ``True`` to work out if it should
run its block of code. Since ``True`` is obviously ``True`` for all time, you
get an infinite loop!)

Let's make a very simple cyber-pet. It's always sad unless you're pressing
button ``A``. If you press button ``B`` it dies. (I realise this isn't a very
pleasant game, so perhaps you can figure out how to improve it.)::

    from microbit import *

    while True:
        if button_a.is_pressed():
            display.show(Image.HAPPY)
        elif button_b.is_pressed():
            break
        else:
            display.show(Image.SAD)

    display.clear()

Can you see how we check what buttons are pressed? We used ``if``,
``elif`` (short for "else if") and ``else``. These are called *conditionals*
and work like this::

    if something is True:
        # do one thing
    elif some other thing is True:
        # do another thing
    else:
        # do yet another thing.

This is remarkably similar to English!

The ``is_pressed`` method only produces two results: ``True`` or ``False``.
If you're pressing the button it returns ``True``, otherwise it returns
``False``. The code above is saying, in English, "for ever and ever, if
button A is pressed then show a happy face, else if button B is pressed break
out of the loop, otherwise display a sad face." We break out of the loop (stop
the program running for ever and ever) with the ``break`` statement.

At the very end, when the cyber-pet is dead, we ``clear`` the display.

Can you think of ways to make this game less tragic? How would you check if
*both* buttons are pressed? (Hint: Python has ``and``, ``or`` and ``not``
logical operators to help check multiple truth statements (things that
produce either ``True`` or ``False`` results).

.. footer:: The image of Matrioshka dolls is licensed CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=69402
