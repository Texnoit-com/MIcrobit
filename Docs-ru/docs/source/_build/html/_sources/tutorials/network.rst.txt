Организации сети
----------------

Вы можете соединять устройства с друг другом для отправки и получения сообщения.
Представьте себе сеть в виде набора слоев. В самом нижнем слое самый должен быть какой-то 
способ для передачи сигнала от одного устройства к другому. Иногда это делается через
радиосоединение, но в этом примере мы просто будем использовать два провода.

Подключение
++++++++++

Сетевой стек будем строить на этом уровне.

.. image:: network.png

Контакт 1 используется для ввода сигналов, контакт 2 для вывода.Выход из одного
устройство подключено ко входу на другом. 

Сигнал
++++++

В первом случае у Вас цифровой сигнал. Отправляется по проводам через контакты ввода-вывода.

Вы можете использовать например такой код::

    pin1.write_digital(1)  # включить сигнал
    pin1.write_digital(0)  # выключить сигнал
    input = pin2.read_digital()  # команда чтения сигнала

Следующий шаг включает в себя описание того, как использовать и обрабатывать сигнал. Для этого Вам
нужены различные протоколы.

Протокол
++++++++

Протокол объясняет, как вести себя в конкретной ситуации. Протокол заранее определен, 
чтобы гарантировать гарантировать правильность передачи и приема сигналов.

Известный протокол для отправки сообщений (предшествовавший компьютерам) —
Азбука Морзе. Он определяет, как отправлять текстовые сообщения с помощью сигналов 
включения/выключения. Длительной или короткой продолжительности:: 

    .-    A     .---  J     ...   S     .----  1      ----.  9
    -...  B     -.-   K     -     T     ..---  2      -----  0
    -.-.  C     .-..  L     ..-   U     ...--  3
    -..   D     --    M     ...-  V     ....-  4
    .     E     -.    N     .--   W     .....  5
    ..-.  F     ---   O     -..-  X     -....  6
    --.   G     .--.  P     -.--  Y     --...  7
    ....  H     --.-  Q     --..  Z     ---..  8
    ..    I     .-.   R

Учитывая приведенную выше диаграмму, для отправки символа «H» сигнал включается четыре раза.
Короткие сигналы обозначают точки (``....``). Для письма "L" сигнал также включается четыре раза, 
но второй сигнал имеет большую продолжительность.

Очевидно, важна синхронизация сигнала: нам нужно отличить точку от точки. Это еще один пункт 
протокола.  Укажим остальные пункты протокола::

* Сигнал длительностью менее 250 миллисекунд является точкой.
* Сигнал длительностью от 250 мс до менее 500 мс — прочерк.
* Любая другая продолжительность сигнала игнорируется.
* Пауза/пробел в сигнале более 500 миллисекунд указывает на конец символа.

Таким образом, отправка буквы «Н» определяется как четыре сигнала «вкл.», которые
имеют длительность не более 250 миллисекунд каждая, после чего следует пауза
продолжительностью более 500 миллисекунд (указывает на конец символа).

.. note::

    Русские буквы Microbit не поддерживает.

Применение протокола
++++++++++++++++++++

The End Result
++++++++++++++

Пример программы::

    from microbit import *
    import music


    # Закодированный словарь .
    MORSE_CODE_LOOKUP = {
        ".-": "A",
        "-...": "B",
        "-.-.": "C",
        "-..": "D",
        ".": "E",
        "..-.": "F",
        "--.": "G",
        "....": "H",
        "..": "I",
        ".---": "J",
        "-.-": "K",
        ".-..": "L",
        "--": "M",
        "-.": "N",
        "---": "O",
        ".--.": "P",
        "--.-": "Q",
        ".-.": "R",
        "...": "S",
        "-": "T",
        "..-": "U",
        "...-": "V",
        ".--": "W",
        "-..-": "X",
        "-.--": "Y",
        "--..": "Z",
        ".----": "1",
        "..---": "2",
        "...--": "3",
        "....-": "4",
        ".....": "5",
        "-....": "6",
        "--...": "7",
        "---..": "8",
        "----.": "9",
        "-----": "0"
    }


    def decode(buffer):
        # Attempts to get the buffer of Morse code data from the lookup table. If
        # it's not there, just return a full stop.
        return MORSE_CODE_LOOKUP.get(buffer, '.')


    # How to display a single dot.
    DOT = Image("00000:"
                "00000:"
                "00900:"
                "00000:"
                "00000:")


    # How to display a single dash.
    DASH = Image("00000:"
                 "00000:"
                 "09990:"
                 "00000:"
                 "00000:")


    # To create a DOT you need to hold the button for less than 250ms.
    DOT_THRESHOLD = 250
    # To create a DASH you need to hold the button for less than 500ms.
    DASH_THRESHOLD = 500


    # Holds the incoming Morse signals.
    buffer = ''
    # Holds the translated Morse as characters.
    message = ''
    # The time from which the device has been waiting for the next keypress.
    started_to_wait = running_time()


    # Put the device in a loop to wait for and react to key presses.
    while True:
        # Work out how long the device has been waiting for a keypress.
        waiting = running_time() - started_to_wait
        # Reset the timestamp for the key_down_time.
        key_down_time = None
        # If button_a is held down, then...
        while button_a.is_pressed():
            # Play a beep - this is Morse code y'know ;-)
            music.pitch(880, 10)
            # Set pin1 (output) to "on"
            pin1.write_digital(1)
            # ...and if there's not a key_down_time then set it to now!
            if not key_down_time:
                key_down_time = running_time()
        # Alternatively, if pin2 (input) is getting a signal, pretend it's a
        # button_a key press...
        while pin2.read_digital():
            if not key_down_time:
                key_down_time = running_time()
        # Get the current time and call it key_up_time.
        key_up_time = running_time()
        # Set pin1 (output) to "off"
        pin1.write_digital(0)
        # If there's a key_down_time (created when button_a was first pressed
        # down).
        if key_down_time:
            # ... then work out for how long it was pressed.
            duration = key_up_time - key_down_time
            # If the duration is less than the max length for a "dot" press...
            if duration < DOT_THRESHOLD:
                # ... then add a dot to the buffer containing incoming Morse codes
                # and display a dot on the display.
                buffer += '.'
                display.show(DOT)
            # Else, if the duration is less than the max length for a "dash"
            # press... (but longer than that for a DOT ~ handled above)
            elif duration < DASH_THRESHOLD:
                # ... then add a dash to the buffer and display a dash.
                buffer += '-'
                display.show(DASH)
            # Otherwise, any other sort of keypress duration is ignored (this isn't
            # needed, but added for "understandability").
            else:
                pass
            # The button press has been handled, so reset the time from which the
            # device is starting to wait for a  button press.
            started_to_wait = running_time()
        # Otherwise, there hasn't been a button_a press during this cycle of the
        # loop, so check there's not been a pause to indicate an end of the
        # incoming Morse code character. The pause must be longer than a DASH
        # code's duration.
        elif len(buffer) > 0 and waiting > DASH_THRESHOLD:
            # There is a buffer and it's reached the end of a code so...
            # Decode the incoming buffer.
            character = decode(buffer)
            # Reset the buffer to empty.
            buffer = ''
            # Show the decoded character.
            display.show(character)
            # Add the character to the message.
            message += character
        # Finally, if button_b was pressed while all the above was going on...
        if button_b.was_pressed():
            # ... display the message,
            display.scroll(message)
            # then reset it to empty (ready for a new message).
            message = ''

How would you improve it? Can you change the definition of a dot and a dash so
speedy Morse code users can use it? What happens if both devices are sending at
the same time? What might you do to handle this situation?

.. footer:: The image of Queen Elizabeth II is licensed as per the details here: https://commons.wikimedia.org/wiki/File:Queen_Elizabeth_II_March_2015.jpg
